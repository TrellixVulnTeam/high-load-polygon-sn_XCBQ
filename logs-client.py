"""
На стороне клиента: использует сокеты для передачи данных серверу
и выводит ответ сервера на каждую строку сообщения; 'localhost' означает,
что сервер выполняется на одном компьютере с клиентом, что позволяет
тестировать клиента и сервер на одном компьютере; для тестирования
через Интернет запустите сервер на удаленном компьютере и установите
serverHost или argv[1] равными доменному имени компьютера или его IP-адресу;
сокеты Python являются переносимым интерфейсом к сокетам BSD,
с методами объектов для стандартных функций сокетов, доступных
в системной библиотеке C;
"""
import sys
from socket import *
# переносимый интерфейс сокетов плюс константы
HOST = 'localhost' # имя сервера, например: 'starship.python.net'
# незарезервированный порт, используемый сервером
PORT = 50009
# Команда для закрытия клиента
EXIT = 'exit'
# текст, посылаемый серверу обязательно
message = b'Hello to log-server from client!'
# типа bytes: b'' или str.encode()
if len(sys.argv) > 1:
    # сервер в аргументе 1 командной строки
    HOST = sys.argv[1]
    if len(sys.argv) > 2:
        # текст в аргументах командной строки 2..n
        message = (x.encode() for x in sys.argv[2:])

# создать объект сокета TCP/IP
soc = socket(AF_INET, SOCK_STREAM)
# соединение с сервером и портом
soc.connect((HOST, PORT))
# создать объект сокета TCP/IP
soc = socket(AF_INET, SOCK_STREAM)
# соединение с сервером и портом
soc.connect((HOST, PORT))

while message.strip() != EXIT:
    message = input()
    soc.send(message.encode())
    # послать серверу строчку через сокет
    data = soc.recv(1024)
    # получить строку от сервера: до 1k
    print('Client received:', data)  # строка bytes выводится в кавычках,
# было `x`, repr(x)
soc.close()
# закрыть сокет, чтобы послать серверу eof
